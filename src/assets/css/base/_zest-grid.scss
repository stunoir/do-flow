// ZURB grid container max width
.grid-container,
hr {
  max-width: $base-grid-container-width;
}

// helper class to add row gap to grid-x (just change to .grid-x?)
.grid-row-gap {
  row-gap: $base-grid-row-gap;
}

////////////////////////////////
// ZESTY GRID NEW START
////////////////////////////////

.zest-grid {
  @extend .grid-container;
  display: flex;
  flex-flow: row wrap;
  padding-right: 0;
  padding-left: 0;
  margin-left: auto;
  margin-right: auto;
  row-gap: 1.875rem;

  >.cell {
    padding-right: 0.625rem;
    padding-left: 0.625rem;

    .zest-grid {
      margin-right: -0.625rem;
      margin-left: -0.625rem;
    }
  }

  &.fluid,
  &.full,
  &.grid-fluid,
  &.grid-full {
    max-width: 100%;
  }

  &.collapse,
  &.grid-collapse {
    padding-right: 0.625rem;
    padding-left: 0.625rem;
    row-gap: 0;

    .cell {
      padding: 0;
    }
  }
}


@media print,
screen and (min-width: 40em) {
  .zest-grid {
    >.cell {
      padding-right: 0.9375rem;
      padding-left: 0.9375rem;

      .zest-grid {
        margin-right: -0.9375rem;
        margin-left: -0.9375rem;
      }
    }

    &.collapse,
    &.grid-collapse {
      padding-right: 0.9375rem;
      padding-left: 0.9375rem;
    }
  }
}

// Variables for breakpoints
$breakpoint-medium: 40em;
$breakpoint-large: 64em;

// Mixin to handle column widths
@mixin column-width($size) {
  width: percentage($size / 12);
}

// General Flex-basis settings for auto sizing
@mixin flex-auto {
  flex: 0 0 auto;
}

// Loop for column sizes
@mixin generate-columns($prefix) {
  @for $i from 1 through 12 {
    .#{$prefix}-#{$i} {
      @include flex-auto;
      @include column-width($i);
    }
  }

  .#{$prefix}-shrink {
    flex-basis: auto;
    width: auto;
  }

  .#{$prefix}-full {
    flex-basis: auto;
    width: 100%;
  }

  .#{$prefix}-auto {
    flex: 1 1 0;
    width: auto;
  }
}

// small (default) grid
.zest-grid {
  > {
    @include generate-columns('small');
  }

  // medium grid
  @media screen and (min-width: $breakpoint-medium) {
    > {
      @include generate-columns('medium');
    }
  }

  // large grid
  @media screen and (min-width: $breakpoint-large) {
    > {
      @include generate-columns('large');
    }
  }
}


////////////////////////////////
// ZESTY CARD GRID START
////////////////////////////////

$card-up-columns: (
  1: 12,
  2: 6,
  3: 4,
  4: 3,
  5: 2.4,
  6: 2,
  7: 1.71429,
  8: 1.5
);

$card-grid-gap: 1.875rem;

.card-grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 0;

  .cell {
    min-height: 0;
    min-width: 0;
    width: 100%;
    grid-column: span 12;
    grid-row: auto;
    height: 100%;
    display: flex;
    flex-direction: column;

    &.cell-stretch {
      >* {
        height: 100%;
      }
    }
  }
}

.card-grid-gap {
  gap: $card-grid-gap;
}

@for $i from 1 through 12 {
  .card-grid {
    >.small-#{$i} {
      grid-column: span #{$i};
    }
  }
}

@media print,
screen and (min-width: 40em) {
  .card-grid {
    @for $i from 1 through 12 {
      >.medium-#{$i} {
        grid-column: span #{$i};
      }
    }
  }
}

@media print,
screen and (min-width: 64em) {
  .card-grid {
    @for $i from 1 through 12 {
      >.large-#{$i} {
        grid-column: span #{$i};
      }
    }
  }
}

@media print,
screen and (min-width: 40em) {
  .card-grid-gap {
    gap: $card-grid-gap;
  }
}

.card-grid {
  @each $key, $value in $card-up-columns {
    &.small-up-#{$key} {
      >.cell {
        grid-column: span #{$value};
      }
    }
  }
}

@media print,
screen and (min-width: 40em) {
  @each $key, $value in $card-up-columns {
    .card-grid {
      &.medium-up-#{$key} {
        >.cell {
          grid-column: span #{$value};
        }
      }
    }
  }
}

@media print,
screen and (min-width: 64em) {
  @each $key, $value in $card-up-columns {
    .card-grid {
      &.large-up-#{$key} {
        >.cell {
          grid-column: span #{$value};
        }
      }
    }
  }

  @for $i from 1 through 12 {
    .card-grid {
      >.card-row-span-#{$i} {
        grid-row: span #{$i};
      }
    }
  }
}